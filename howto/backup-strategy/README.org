#+STARTUP: indent
#+STARTUP: overview
#+STARTUP: logdone
#+TITLE: Backup Strategies

This records the backup strategies that I will try out (on Linux
system), and some references of tools or methods mentioned that are
probably interesting but I have not seriously considered.

* Considerations of backup

** Basic idea: make a copy
  - the basic idea of backup is to make copy of important data, so
    that it can be restored in case of corruption in the original data
    store
** Simple strategy: accumulate files
  - for data that is mostly accumulative, i.e. usually new files are
    added and old files stay unchanged, then one simple idea is to
    keep copying newly added files to the same backup
  - this may work well with media files that we usually keep intact,
    although we may derive new files from old ones, e.g. video or
    image editing
  - you may choose to manually figure out which files are new or have
    changed, and copy over, or you may use tools (e.g. rsync) to help
    you
** Simple strategy: version control for relatively small files
  - for program code or smaller text files (e.g. blog posts, org
    notes), we may use version control such as =git=, which keeps all
    the committed history
  - but source control may or may not work well with large number of
    files, or large files
** Need for backups at multiple points in time
  - but we may be lazy and do not want to worry about using which
    strategy for which type of data, so we can still make backup,
    e.g. of the home directory
  - however, we may be dissatified with always overwriting the same
    backup copy, because we may want to get back the copy of some
    files at an earlier date, e.g.
    - day one you make a backup
    - day two, you make a change to some file (assuming not using
      version control), and also backup, overwriting day one's backup
    - day three, you make large changes to that file, and also backup,
      overwriting day two's backup
    - day four, you regret day three's changes, and want day two's
      version of the file, but you will not have it anymore
  - then a simple idea is to make a new copy each time want to make a
    backup, e.g. regularly, or just before or after making important
    changes
  - of course, always making full copies at multiple time points takes
    up a lot of space and time, so it may be desirable to avoid
    copying unchanged files over and over, saving both time and space
  - it is even better if unchanged files are somehow shared in the
    backup, so that we still see full copies of the set of files at
    different time points
** Scope of backups
- you may choose to backup the whole system, or just selected
  directories or files, depending on the importance of the files to
  you
- e.g. you may choose not to backup the system files, because they can
  be reinstalled; but you may still want to backup the system config
  files (usually in =/etc= on Linux or Unix systems) because it may be
  difficult to reconfigure the system
- e.g. you may choose not to back either the system files or system
  config files in =/etc=, but instead use Guix system and backup the
  channels file and system =config.scm=
- e.g. you may choose to backup the whole =/home= directory, which
  contains your user config files and user data files (e.g. photos,
  videos, blog posts, source code, etc)
- e.g. you may choose to backup most of the =/home= directory, but not
  the source code of projects you are working on because you have
  separate version control for them

** Frequency of backups
- you may decide how frequent to make backups, depending on
  - the importance of the files
  - the importance of the changes
  - and the frequency of the changes
  - the resources you have or willing to spend on the backups
- for some people, weekly or even monthly may be sufficient, if
  important files do not change often
- some people may want daily or even hourly backups
- it is usual to backup frequently, but to keep less time points for
  older backups, e.g.
  - keep backups for the last few hours
  - then last few days, i.e. for yesterday, only keep copy instead of
    all 24 hourly copies
  - then last week, last month, and so on
* Some common terminologies
** full backup
- a full copy of the data that you intend to backup
** differential backup
- backup the difference relative to a full backup
- for example:
  - day 1: make a full backup
  - day 2: backup the changes from day 1, i.e. a differential backup
  - day 3: backup the changes from day 1, i.e. another differential
    backup
- NOTE:
  - differential backup is always relative to a full backup,
    therefore, you only need the differential backup at one point and
    the associated full backup to recover the files
** incremental backup
- backup the difference relative to either a full backup or a previous
  incremental backup
- for example:
  - day 1: make a full backup
  - day 2: backup the changes from day 1, i.e. an incremental backup
    (which is also a differential backup relative to day 1)
  - day 3: backup the changes from *day 2*, i.e. another incremental
    backuo (which is NOT a differential backup relative to day 1)
  - day 4: backup the changes from *day 3*, i.e. another incremental
    backup
- NOTE:
  - for recovery of the files at one point, you would need the
    associated full backup and the series of incremental backups up to
    that point, applied in order
  - e.g., to recover files of day 3 in the above example, you would
    need the full backup in day 1, and apply the incremental backup of
    day 2, and then apply the incremental backup of day 3
** 3-2-1 backup strategy
- at least 3 copies
- on at least 2 mediums
- 1 is at a remote site (could be on cloud, or in a physical far enough location from your other copies)
** snapshot
- can mean a set of files at a particular point in time
- also refers to a kind of feature supported by some filesystems, such
  as btrfs and ZFS
- a copy of the data at a point in time, and can be taken quickly and
  cheaply
- snapshots usually reside in the same filesystem, so is not good
  enough as a backup
- useful for backup by first quickly taking a snapshot, then copy or
  sync the snapshot elsewhere (which may take some time), reducing the
  chance of copying half states of the set of files if the system is
  still operating
- some filesystem (e.g. btrfs) supports efficiently syncing snapshots
  between two btrfs filesystems
* Strategies to try
I will probably adopt all these strategies, but some may take more
time to setup, so may be delayed.
** With Btrfs snapshots
- idea:
  - use btrfs filesystem for the main system and the backup
    (e.g. external hard drive or remote machine), and create subvolume
    for home directory, and enjoy the
    - copy-on-write
    - transactional behavior
    - transparent compression
    - checksum
    - efficient and quick snapshots
  - when we want to backup, make a snapshot of subvolume (e.g. the
    home), and sync the (incremental changes of) snapshot to the
    backup system
- NOTE:
  - snapshots alone in the same filesystem are not good enough as backup
  - but snapshots provides an efficient way to sync (possibly through
    network by using ssh) the changes to another btrfs filesystem,
    which /is/ the backup
  - in the backup, each snapshot serves as a full backup at a chosen
    time point
  - the snapshot can either be restored as a whole, or be used to
    cherry-picked some files at chosen time point
  - the filesystem can optionally be encrypted for improved data
    security at rest
- see [[file:backup-with-btrfs-snapshots.org][Backup with Btrfs snapshots]]
** With rsync
- idea:
  - =rsync= can be used to synchronize files from one directory (from
    one filesystem) to another directory (possibly on another
    filesystem, and possibly through network using ssh)
  - with the =--link-dest= option and a reference /snapshot/ (e.g. a
    previous backup), files that have not changed can be [[https://en.wikipedia.org/wiki/Hard_link][hard-linked]]
    instead of copied, and therefore saving space
  - therefore we can use =rsync= to make full backups at different
    time points, but each time use the latest backup as reference for
    =--link-dest=, so that we hard-link unchanged files to save space
- NOTE:
  - with this method, since some files at different snapshots are
    shared using hard-links, each snapshot can be independently
    deleted without affecting other snapshots, whenever we no longer
    need that snapshot
  - the filesystem will keep track of the hard-links, and if the blob
    of file has zero hard-links pointing to it, the space will be
    automatically reclaimed
  - but the shared files should not be modified, otherwise, the "copy"
    at different snapshots hard-linking to the same file will see the
    same change
  - the filesystem can optionally be encrypted for improved data
    security at rest
- see [[file:backup-with-rsync.org][Backup with rsync]]
** With tar
- idea:
  - =tar= can be used to archive a set of files or directories as one
    single file, which can be zipped or encrypted for transferring or
    backup
  - =tar= also supports creating an incremental (or differential,
    depending on the reference used) archive by using =snar= file which
    records some metadata so that the changes can be determined and
    archived accordingly
  - therefore we can use this feature to create incremental or
    differential backups, by suitably managing a full backup, and the
    associated snar file(s) and archived changes
  - the full backup and incremental or differential backup(s) can be
    optionally easily zipped and/or encrypted, which is useful for
    backups put at cloud, to save cost and improving privacy
- NOTE:
  - restoring files from the tar incremental or differntial backups
    takes a little bit more work than the above btrfs or rsync methods
- see [[file:backup-with-tar.org][Backup with tar]]
* Other references
In the process of finding information of the above backup strategies,
I have found some posts which is useful as reference, and some often
mentioned tools (by no means exhaustive) which I do not intend to try
out at the moment. They are included here for reference.

- rsync related:
  - Time Machine-style backup using rsync: https://github.com/laurent22/rsync-time-backup
    - associated hackernew post: https://news.ycombinator.com/item?id=6623514
  - [[https://linuxconfig.org/how-to-create-incremental-backups-using-rsync-on-linux][How to create incremental backups using rsync on Linux]]
  - https://officeguide.cc/linux-rsync-incremental-backups-hard-link-snapshots-tutorial-examples/
  - [[https://rsnapshot.org/][rsnapshot]]
- btrfs related:
  - [[https://wiki.tnonline.net/w/Btrfs/Getting_Started][Btrfs/Getting Started]]
  - [[https://linuxhint.com/back_up_btrfs_snapshots_external_drives/][How to Backup Btrfs Snapshots to External Drives]]
  - [[https://linuxhint.com/how-to-use-btrfs-scrub/][How to Use Btrfs Scrub?]]
  - [[https://github.com/digint/btrbk][btrbk]]
  - [[https://en.wikipedia.org/wiki/ZFS][ZFS]] instead of btrfs
- encryption:
  - https://opensource.com/article/21/3/encryption-luks
  - [[https://wiki.archlinux.org/title/Dm-crypt/Encrypting_an_entire_system][ArchWiki: dm-crypt/Encrypting an entire system]]
- git related
  - [[https://github.com/bup/bup][bup]]
  - [[https://git-annex.branchable.com/][git-annex]]
  - [[https://en.wikipedia.org/wiki/Git-annex][Wiki: git-annex]]
